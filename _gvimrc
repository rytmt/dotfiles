set background=dark
colorscheme hybrid
"colorscheme jellybeans
"set lines=40
"set columns=120
"set guifont=MS_Gothic:h10
"set guifontwide=MS_Gothic:h10
set nomousefocus
set mousehide
set guifont=Migu_1M:h10
set guifontwide=Migu_1M:h10
set renderoptions=type:directx,renmode:5
set guioptions-=m
set guioptions-=T
set guioptions-=r
set guioptions-=R
set guioptions-=l
set guioptions-=L
set guioptions-=b
set guioptions-=e
set showtabline=1
"highlight NonText guifg=#444444
highlight SpecialKey guifg=#888888
"highlight CursorLine gui=underline guifg=NONE guibg=NONE
highlight CursorLine guibg=#333333
"highlight Visual guibg=#666666
"highlight LineNr guibg=#333333 guifg=#777777
"highlight CursorLineNr guibg=#333333 guifg=#ddddff
"highlight Normal guifg=#e6e6c6
highlight mailQuoted1 guifg=#81a2be
"highlight mailQuoted1 guifg=#4682b4
highlight mailQuoted2 guifg=#cd853f
highlight mailQuoted3 guifg=#b5bd68
highlight mailQuoted4 guifg=#b294bb
highlight mailQuoted5 guifg=#cc6666
autocmd GUIEnter * set transparency=255
"autocmd FocusGained * set transparency=235
"autocmd FocusLost * set transparency=200

ScreenMode 5

" Save gvim window size and position
" for .eml file
if expand("%:t") =~ ".*\.eml"
  let g:save_window_file_eml = 'C:\applications\vimtmp\.vimwinpos_eml'
  augroup SaveWindow
    autocmd!
    autocmd VimLeavePre * call s:save_window()
    function! s:save_window()
      let options = [
        \ 'set columns=' . &columns,
        \ 'set lines=' . &lines,
        \ 'winpos ' . getwinposx() . ' ' . getwinposy(),
        \ ]
      call writefile(options, g:save_window_file_eml)
    endfunction
  augroup END
  
  if filereadable(g:save_window_file_eml)
    execute 'source' g:save_window_file_eml
  endif
else
  " for files except for eml
  let g:save_window_file_others = 'C:\applications\vimtmp\.vimwinpos_others'
  augroup SaveWindow
    autocmd!
    autocmd VimLeavePre * call s:save_window()
    function! s:save_window()
      let options = [
        \ 'set columns=' . &columns,
        \ 'set lines=' . &lines,
        \ 'winpos ' . getwinposx() . ' ' . getwinposy(),
        \ ]
      call writefile(options, g:save_window_file_others)
    endfunction
  augroup END
  
  if filereadable(g:save_window_file_others)
    execute 'source' g:save_window_file_others
  endif

  " for changing window size
  if filereadable(g:save_window_file_others)
    function! Toggle_window_size()
      let l:initial_window = readfile(g:save_window_file_others)
      let l:current_column = &columns
      let l:current_line = &lines
      let l:initial_column = split(l:initial_window[0], '=')[1]
      let l:initial_line = split(l:initial_window[1], '=')[1]

      if (l:current_column == l:initial_column && l:current_line == l:initial_line)
        call feedkeys(":ScreenMode 5\<CR>")
      else
        execute 'source' g:save_window_file_others
      endif
    endfunction
  nnoremap <C-Enter> :call Toggle_window_size()<CR>
  endif
endif

" <S-j> is overwritten by JpFormat.vim
nnoremap <S-j> 10j
nnoremap <S-t> :$tabnew<CR>

